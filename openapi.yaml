openapi: "3.0.0"
info:
  title: "Octoflow API"
  version: "1.0.0"
servers:
  - url: "https://v2.gitlogs.xyz"
    description: "Production"
paths:
  /kittycat:
    get:
      summary: "Get Webhook"
      operationId: "getWebhookInfo"
      parameters:
        - name: "id"
          in: "query"
          required: true
          schema:
            type: "string"
          description: "The ID of the webhook"
      responses:
        '200':
          description: "Webhook info retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrBadRequest"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrNotFound"
    post:
      summary: "Handle Webhook"
      operationId: "handleGithubWebhook"
      parameters:
        - name: "id"
          in: "query"
          required: true
          schema:
            type: "string"
          description: "The ID of the webhook"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GithubWebhookPayload"
      responses:
        '200':
          description: "Webhook handled successfully"
          content:
            text/plain:
              schema:
                type: "string"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrBadRequest"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrUnauthorized"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrNotFound"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrInternalServerError"
  /api/stats:
    get:
      summary: "Client Stats"
      operationId: "apiStats"
      responses:
        '200':
          description: "API stats retrieved successfully"
          content:
            text/plain:
              schema:
                type: "string"
                example: "10,1000,5"
  /api/events/list:
    get:
      summary: "Supported Events"
      operationId: "apiEventsListView"
      responses:
        '200':
          description: "List of supported events retrieved successfully"
          content:
            text/plain:
              schema:
                type: "string"
                example: "- push\n- pull_request"
components:
  schemas:
    WebhookInfo:
      type: "object"
      properties:
        broken:
          type: "boolean"
          description: "Indicates if the webhook is broken"
        comment:
          type: "string"
          description: "Comment associated with the webhook"
        eventModifiers:
          type: "array"
          items:
            $ref: "#/components/schemas/EventModifier"
          description: "List of event modifiers for the webhook"
        repositories:
          type: "array"
          items:
            $ref: "#/components/schemas/Repository"
          description: "List of repositories associated with the webhook"
    EventModifier:
      type: "object"
      properties:
        id:
          type: "string"
          description: "ID of the event modifier"
        events:
          type: "array"
          items:
            type: "string"
          description: "List of events the modifier applies to"
        repoID:
          type: "string"
          description: "ID of the repository"
        blacklisted:
          type: "boolean"
          description: "Indicates if the modifier is blacklisted"
        whitelisted:
          type: "boolean"
          description: "Indicates if the modifier is whitelisted"
        redirectChannel:
          type: "string"
          description: "Channel to redirect the event to"
        priority:
          type: "integer"
          description: "Priority of the event modifier"
    Repository:
      type: "object"
      properties:
        repoID:
          type: "string"
          description: "ID of the repository"
        repoName:
          type: "string"
          description: "Name of the repository"
        channelID:
          type: "string"
          description: "ID of the channel"
        createdAt:
          type: "string"
          format: "date-time"
          description: "Creation date of the repository"
    GithubWebhookPayload:
      type: "object"
      properties:
        action:
          type: "string"
          description: "Action performed in the event"
        repository:
          type: "object"
          properties:
            id:
              type: "integer"
              description: "ID of the repository"
            name:
              type: "string"
              description: "Name of the repository"
            full_name:
              type: "string"
              description: "Full name of the repository"
        sender:
          type: "object"
          properties:
            login:
              type: "string"
              description: "Login of the sender"
            id:
              type: "integer"
              description: "ID of the sender"
    ErrBadRequest:
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            code:
              type: "string"
              enum: ["BAD_REQUEST"]
              description: "A machine readable error code."
              example: "BAD_REQUEST"
            message:
              type: "string"
              description: "A human readable explanation of what went wrong"
            requestId:
              type: "string"
              description: "Please always include the requestId in your error report"
              example: "req_1234"
          required: ["code", "message", "requestId"]
      required: ["error"]
    ErrUnauthorized:
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            code:
              type: "string"
              enum: ["UNAUTHORIZED"]
              description: "A machine readable error code."
              example: "UNAUTHORIZED"
            message:
              type: "string"
              description: "A human readable explanation of what went wrong"
            requestId:
              type: "string"
              description: "Please always include the requestId in your error report"
              example: "req_1234"
          required: ["code", "message", "requestId"]
      required: ["error"]
    ErrNotFound:
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            code:
              type: "string"
              enum: ["NOT_FOUND"]
              description: "A machine readable error code."
              example: "NOT_FOUND"
            message:
              type: "string"
              description: "A human readable explanation of what went wrong"
            requestId:
              type: "string"
              description: "Please always include the requestId in your error report"
              example: "req_1234"
          required: ["code", "message", "requestId"]
      required: ["error"]
    ErrInternalServerError:
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            code:
              type: "string"
              enum: ["INTERNAL_SERVER_ERROR"]
              description: "A machine readable error code."
              example: "INTERNAL_SERVER_ERROR"
            message:
              type: "string"
              description: "A human readable explanation of what went wrong"
            requestId:
              type: "string"
              description: "Please always include the requestId in your error report"
              example: "req_1234"
          required: ["code", "message", "requestId"]
      required: ["error"]